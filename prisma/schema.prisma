generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}
enum Gender {
  male
  female
  nonBinary
  other
  prefererNotToSay
}
enum GraduationLevel {
  highSchool //ensino médio
  technicalCourse //curso técnico
  technologist //tecnólogo
  license //licenciatura
  bachelor //bacharelado
  postGraduation //pós graduação
  master //mestrado
  doctorate // doutorado
  certification // certificação
}
enum planStage {
  concept
  prototype
  tutorial
}
enum contributionType {
  idea
  question
  experience
}
enum offenseLevel {
  light
  moderate
  severe
}
model user {
  id String @id @default(uuid()) @db.Uuid 
  createdAt DateTime @default(now())
  isActive Boolean @default(true)
  deactivatedAt DateTime?
  deactivatedById String? 
  userProfile userProfile? //One-to-One
  userSocialMedias userSocialMedias? //One-to-One
  userLog userLog[] //One-to-Many
  userConnections userConnections[] //One-to-Many
  userGraduations userEducation[]
  userAddress userAddress?
  userPlans plan[]
  userFollowedPlans userFollowPlan[]
  userLikedPlans userLikesPlan[]
  userCommentsOnPlans userCommentsPlan[]
  userLikedComments userLikesComment[]
  userContributions contribution[]
  userCommentsOnContributions userCommentsContribution[]
  userLikedContributions userLikesContribution[]
}
model userProfile {
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid 
  username String @unique @db.VarChar(32)
  email String @unique @db.VarChar(120)
  firstName String @db.VarChar(60)
  lastName String @db.VarChar(60)
  birthDate DateTime? @db.Date
  phone String? @db.VarChar(11)
  gender Gender
  password String @db.VarChar(120)
}
model userSocialMedias{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid 
  userLinkedin String? @db.VarChar(100)
  userGithub String? @db.VarChar(100)
  idLattes String? @db.VarChar(20)
}
model userLog {
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [madeBy], references: [id])
  madeBy String @db.Uuid
  activity String @db.VarChar(300)
  registeredAt DateTime
}
model userConnections{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  userConnectedId String? @db.Uuid
  requestSent Boolean @default(true)
  isConnected Boolean @default(false)
  connectionDate DateTime
}
model institution{
  id String @id @default(uuid()) @db.Uuid 
  name String @db.VarChar(200)
  isOfficial Boolean @default(false)
  isActive Boolean @default(true)
  createdAt DateTime
  updatedAt DateTime
  lastModifiedBy String? @db.Uuid //userId
  imageUrl String? //a S3
  institutionAddress institutionAddress? 
  usersOnInstitution userEducation[]
}
model userEducation{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  institution institution @relation(fields: [institutionId], references: [id])
  institutionId String @db.Uuid 
  graduation String @db.VarChar(120)
  graduationLevel GraduationLevel
  initialDate DateTime @db.Date
  finalDate DateTime @db.Date
}
model userAddress{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid 
  country String @db.VarChar(50)
  state String @db.VarChar(50)
  city String @db.VarChar(50)
}
model institutionAddress{
  id String @id @default(uuid()) @db.Uuid 
  institution institution @relation(fields: [institutionId], references: [id])
  institutionId String @unique @db.Uuid 
  country String @db.VarChar(50)
  state String @db.VarChar(50)
  city String @db.VarChar(50)
}
model planCategory{
  id String @id @default(uuid()) @db.Uuid 
  name String @db.VarChar(20)
  description String @db.VarChar(200)
  createdAt DateTime
  updatedAt DateTime
  updatedBy String @db.Uuid
  plansWithCategory planHasCategories[]
}
model plan{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  title String @db.VarChar(120)
  resume String? @db.VarChar(300)
  description String? @db.VarChar(10000)
  createdAt DateTime
  updatedAt DateTime
  isClosed Boolean @default(false)
  isActive Boolean @default(true)
  planStage planStage @default(concept)
  bannerImageUrl String?
  iconImageUrl String?
  planReports planReports[]
  planLog planLog[]
  planFollows userFollowPlan[]
  planLikes userLikesPlan[]
  planComments userCommentsPlan[]
  planContributions contribution[]
  planCategories planHasCategories[]
}
model planHasCategories{
  id String @id @default(uuid()) @db.Uuid 
  plan plan @relation(fields: [planId], references: [id])
  planId String @db.Uuid 
  category planCategory @relation(fields: [categoryId], references: [id])
  categoryId String @db.Uuid 
}
model planReports{
  id String @id @default(uuid()) @db.Uuid
  plan plan @relation(fields: [planId], references: [id])
  planId String @db.Uuid 
  motive String @db.VarChar(200)
  detailedMotive String? @db.VarChar(1000)
  reportedAt DateTime
  revised Boolean @default(false)
  revisedBy String? @db.Uuid
  revisedAt DateTime?
  offenseLevel offenseLevel
}
model planLog{
  id String @id @default(uuid()) @db.Uuid
  plan plan @relation(fields: [planId], references: [id])
  planId String @db.Uuid 
  activity String @db.VarChar(300)
  registeredAt DateTime
  madeBy String @db.Uuid
}
model userFollowPlan{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  plan plan @relation(fields: [planId], references: [id])
  planId String @db.Uuid 
  followedAt DateTime @default(now())
  isFollowing Boolean @default(true)
  unfollowedAt DateTime?

  @@unique([userId, planId])
}
model userLikesPlan{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  plan plan @relation(fields: [planId], references: [id])
  planId String @db.Uuid 
  likedAt DateTime @default(now())
  isLiked Boolean @default(true)
  dislikedAt DateTime?

  @@unique([userId, planId])
}
model userCommentsPlan{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  plan plan @relation(fields: [planId], references: [id])
  planId String @db.Uuid 
  content String @db.VarChar(1000)
  isActive Boolean @default(true)
  deactivatedAt DateTime?
  deactivatedBy String? @db.Uuid
}
model userLikesComment{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  commentId String @db.Uuid
  likedAt DateTime @default(now())
  isLiked Boolean @default(true)
  dislikedAt DateTime?

  @@unique([userId, commentId])
}
model contribution{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  plan plan @relation(fields: [planId], references: [id])
  planId String @db.Uuid 
  title String @db.VarChar(120)
  description String @db.VarChar(10000)
  contributionType contributionType @default(idea)
  createdAt DateTime @default(now())
  updatedAt DateTime
  isActive Boolean @default(true)
  deactivatedBy String? @db.Uuid
  deactivatedAt DateTime?
  comments userCommentsContribution[]
  likes userLikesContribution[]
}
model userCommentsContribution{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  contribution contribution @relation(fields: [contributionId], references: [id])
  contributionId String @db.Uuid 
  content String @db.VarChar(1000)
  isActive Boolean @default(true)
  deactivatedBy String? @db.Uuid
  deactivatedAt DateTime?
}
model userLikesContribution{
  id String @id @default(uuid()) @db.Uuid 
  user user @relation(fields: [userId], references: [id])
  userId String @db.Uuid 
  contribution contribution @relation(fields: [contributionId], references: [id])
  contributionId String @db.Uuid 
  likedAt DateTime @default(now())
  isLiked Boolean @default(true)
  dislikedAt DateTime?

  @@unique([userId, contributionId])
}